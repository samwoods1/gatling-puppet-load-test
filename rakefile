require 'rototiller'
require 'rspec/core/rake_task'

require './setup/helpers/abs_helper'
include AbsHelper

task :default => :performance

desc 'Provision systems using ABS (or use already set ABS_RESOURCE_HOSTS) and then execute beaker performance setup and tests'
rototiller_task :performance do
  if ENV['PUPPET_GATLING_REPORTS_ONLY'] == 'true' && (!ENV['PUPPET_GATLING_REPORTS_TARGET'] || ENV['PUPPET_GATLING_REPORTS_TARGET'] == '')
    abort 'A valid result folder (i.e. PerfTestLarge-1524848074511) must be specified for PUPPET_GATLING_REPORTS_TARGET if PUPPET_GATLING_REPORTS_ONLY=true'
  end

  Rake::Task["performance_provision_with_abs"].execute unless ENV['ABS_RESOURCE_HOSTS'] ||
      (ENV['BEAKER_HOSTS'] &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/pe-perf-test.cfg' &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/foss-perf-test.cfg') &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/opsworks-perf-test.cfg'
  Rake::Task["performance_without_provision"].execute
  Rake::Task["performance_deprovision_with_abs"].execute unless ENV['BEAKER_PRESERVE_HOSTS'] == 'always' ||
      ((@beaker_cmd.nil? || @beaker_cmd.result.exit_code != 0)&&
          ENV['BEAKER_PRESERVE_HOSTS'] == 'onfail')
end

desc 'Provision systems using ABS (or use already set ABS_RESOURCE_HOSTS) and then execute beaker performance setup ' +
    'and tests for opsworks'
rototiller_task :opsworks_performance do
  raise "The test must be Opsworks.rb, or '' if you plan to execute tests later" unless
    ["", "tests/OpsWorks.rb"].include? ENV["BEAKER_TESTS"]
  configure_opsworks
  Rake::Task["performance"].execute
end

def configure_opsworks
  ENV['BEAKER_HOSTS'] = 'config/beaker_hosts/opsworks-perf-test.cfg'
  # sizes can be any of the 3 below, specifying nothing defaults to c4.2xlarge so that is ok too
  opsworks_instance_sizes = ["m5.large", "c4.xlarge", "c4.2xlarge", ""]
  if ["c4.2xlarge", ""].include? ENV['ABS_AWS_MOM_SIZE']
    opsworks_size = "Large"
  elsif "c4.xlarge" == ENV['ABS_AWS_MOM_SIZE']
    opsworks_size = "Med"
  elsif "m5.large" == ENV['ABS_AWS_MOM_SIZE']
    opsworks_size = "Small"
  else
    raise "Env var ABS_AWS_MOM_SIZE must be one of #{opsworks_instance_sizes.to_s}"
  end

  scale_classes = ["role::by_size::small", "role::by_size::medium", "role::by_size::large", ""]
  if ["role::by_size::large", ""].include? ENV["PUPPET_SCALE_CLASS"]
    catalog_size = "Large"
  elsif "role::by_size::medium" == ENV["PUPPET_SCALE_CLASS"]
    catalog_size = "Med"
  elsif "role::by_size::small" == ENV["PUPPET_SCALE_CLASS"]
    catalog_size = "Small"
  else
    raise "Env var PUPPET_SCALE_CLASS must be one of #{scale_classes.to_s}"
  end
  ENV["OPSWORKS_SCENARIO"] = "OpsWorks#{opsworks_size}Catalog#{catalog_size}.json"
end

desc 'Provision systems for the performance task with ABS - included in the performance task'
rototiller_task :performance_provision_with_abs do |t|
  raise "The BEAKER_INSTALL_TYPE env var must be set to either 'pe' or 'foss' to continue" unless
      ENV['BEAKER_INSTALL_TYPE'] == 'pe' || ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'BEAKER_PE_DIR', :message => 'The PE download directory, example: http://enterprise.delivery.puppetlabs.net/archives/releases/2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
  t.add_env({:name => 'BEAKER_PE_VER', :message => 'The PE version to install on hosts, example: 2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
  t.add_env({:name => 'ABS_OS', :default => 'centos-7-x86-64-west', :message => 'The OS to provision with ABS: centos-7-x86-64-west (for AWS), or centos-7-x86_64 (for vmpooler)'})

  abs_resource_hosts = get_abs_resource_hosts(get_a2a_hosts)
  raise 'Unable to provision hosts via ABS' unless abs_resource_hosts
end

desc 'Task to de-provision systems that were provisioned with ABS - included in the performance task following the rules of BEAKER_PRESERVE_HOSTS env var.'
rototiller_task :performance_deprovision_with_abs do
  abs_resource_hosts = ENV['ABS_RESOURCE_HOSTS'].nil? ? get_last_abs_resource_hosts : ENV['ABS_RESOURCE_HOSTS']
  raise 'This task requires an array of hostnames to be specified via the ABS_RESOURCE_HOSTS environment variable or the last_abs_resource_hosts.log file' unless abs_resource_hosts

  returned_hosts = return_abs_resource_hosts(abs_resource_hosts)
  raise 'Failed to de-provision ABS hosts' unless returned_hosts == abs_resource_hosts
end

desc 'Run Performance tests using previously provisioned hosts'
rototiller_task :performance_against_already_provisioned do
  ENV['BEAKER_HOSTS'] ||= "log/latest/hosts_preserved.yml"
  ENV['ABS_RESOURCE_HOSTS'] = File.open("last_abs_resource_hosts.log").readlines[0] if File.exist? "last_abs_resource_hosts.log"
  ENV['BEAKER_PRE_SUITE'] = ""
  Rake::Task["performance_without_provision"].execute
end

desc 'Execute beaker performance setup and tests against existing hosts specified by ABS_RESOURCE_HOSTS env var, intended to be used in CI - use task "performance" for local/dev execution'
rototiller_task :performance_without_provision do |t|
  t.add_env({:name => 'ABS_RESOURCE_HOSTS', :message => 'The string returned from the ABS service describing your hosts'}) if ENV['BEAKER_HOSTS'] == 'config/beaker_hosts/pe-perf-test.cfg' ||
      ENV['BEAKER_HOSTS'] == 'config/beaker_hosts/foss-perf-test.cfg'
  t.add_env({:name => 'ABS_AWS_METRICS_SIZE', :default => 'c4.2xlarge', :message => 'The AWS instance size for the Metrics host'})
  t.add_env({:name => 'ABS_AWS_MOM_SIZE', :default => 'c4.2xlarge', :message => 'The AWS instance size for the MOM host'})
  t.add_env({:name => 'ENVIRONMENT_TYPE', :message => 'Either gatling or clamps', :default => 'gatling'})
  t.add_env({:name => 'PUPPET_GATLING_R10K_CONTROL_REPO', :default => 'git@github.com:puppetlabs/puppetlabs-puppetserver_perf_control.git'})
  if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
    t.add_env({:name => 'PUPPET_GATLING_R10K_BASEDIR', :default => '/etc/puppetlabs/code/environments'})
  else
    t.add_env({:name => 'PUPPET_GATLING_R10K_BASEDIR', :default => '/etc/puppetlabs/code-staging/environments'})
  end
  t.add_env({:name => 'PUPPET_GATLING_R10K_ENVIRONMENTS', :default => 'production'})
  t.add_env({:name => 'PUPPET_BIN_DIR', :default => '/opt/puppetlabs/puppet/bin'})
  t.add_env({:name => 'PUPPET_R10K_VERSION', :default => '2.3.0'})
  t.add_env({:name => 'PUPPET_SCALE_CLASS', :default => 'role::by_size::large'})
  t.add_env({:name => 'PUPPET_GATLING_SCENARIO', :default => 'ApplesToApples.json'})
  t.add_env({:name => 'BEAKER_TESTS', :default => 'tests/ApplesToApples.rb'})
  t.add_env({:name => 'BEAKER_POST_SUITE', :default => ''})
  t.add_env({:name => 'PUPPET_SERVER_SERVICE_NAME', :default => 'pe-puppetserver'})
  t.add_env({:name => 'SUT_ARCHIVE_FILES', :default => ''})
  t.add_env({:name => 'PACKAGE_BUILD_VERSION', :default => 'latest'}) if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'PUPPET_AGENT_VERSION', :default => 'latest'}) if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'PUSH_TO_BIGQUERY', :default => 'false',
    :message => 'True if you want to store a new set of results as a baseline value'})

  configure_opsworks if ENV["BEAKER_TESTS"] == 'tests/OpsWorks.rb'
  # env vars needed for Beaker
  @beaker_cmd = t.add_command do |command|
    command.name = "bundle exec beaker"
    command.add_env({:name => 'BEAKER_EXECUTABLE'})

    command.add_option do |option|
      option.name = '--hosts'
      option.message = 'The configuration file that Beaker will use'
      option.add_argument do |arg|
        arg.name = "config/beaker_hosts/pe-perf-test.cfg" if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
        arg.name = "config/beaker_hosts/foss-perf-test.cfg" if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
        arg.add_env({:name => 'BEAKER_HOSTS'})
      end
    end
    # this is specified in the options file
    #   this is here so it can be overridden in the rake task
    #   there is no beaker built-in env var for this
    unless (!ENV['BEAKER_KEYFILE'] || ENV['BEAKER_KEYFILE'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--keyfile'
        option.message = 'The SSH key used to access a SUT'
        option.add_argument do |arg|
          arg.name = "#{ENV['HOME']}/.ssh/id_rsa-acceptance"
          arg.add_env({:name => 'BEAKER_KEYFILE'})
        end
      end
    end
    command.add_option do |option|
      option.name = '--log-level'
      option.message = 'The log level under which you want beaker to run'
      option.add_argument do |arg|
        arg.name = 'debug'
        arg.add_env({:name => 'BEAKER_LOG_LEVEL'})
      end
    end
    unless ENV['BEAKER_OPTIONS_FILE'] == ''
      command.add_option do |option|
        option.name = '--options'
        option.message = 'Beaker options file'
        option.add_argument do |arg|
          arg.name = 'setup/options/options_pe.rb' if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
          arg.name = 'setup/options/options_foss.rb' if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
          arg.add_env({:name => 'BEAKER_OPTIONS_FILE'})
        end
      end
    end
    #FIXME this disallows rototiller from showing this env, when it doesn't exist
    unless (!ENV['BEAKER_PRE_SUITE'] || ENV['BEAKER_PRE_SUITE'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--pre-suite'
        option.message = 'Beaker pre-suite'
        option.add_argument do |arg|
          arg.name = ''
          arg.add_env({:name => 'BEAKER_PRE_SUITE'})
        end
      end
    end
    unless ENV['BEAKER_POST_SUITE'] == ''
      command.add_option do |option|
        option.name = '--post-suite'
        option.message = 'Beaker post-suite'
        option.add_argument do |arg|
          arg.name = 'post/zzz_copy_sut_archive_files.rb'
          arg.add_env({:name => 'BEAKER_POST_SUITE'})
        end
      end
    end
    unless ENV['BEAKER_TESTS'] == ''
      command.add_option do |option|
        option.name = '--tests'
        option.message = 'Beaker tests'
        option.add_argument do |arg|
          arg.name = 'tests/'
          arg.add_env({:name => 'BEAKER_TESTS'})
        end
      end
    end
    unless (!ENV['BEAKER_HELPER'] || ENV['BEAKER_HELPER'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--helper'
        option.message = 'Setup helper ruby scripts, comma separated'
        option.add_argument do |arg|
          arg.add_env({:name => 'BEAKER_HELPER'})
        end
      end
    end
    command.add_option do |option|
      option.name = '--preserve-hosts'
      option.message = 'Whether to preserve hosts or not.'
      option.add_argument do |arg|
        arg.name = 'always'
        arg.add_env({:name => 'BEAKER_PRESERVE_HOSTS'})
      end
    end
    command.add_option do |option|
      option.name = '--type'
      option.message = 'pe or foss'
      option.add_argument do |arg|
        arg.name = 'pe'
        arg.add_env({:name => 'BEAKER_INSTALL_TYPE'})
      end
    end
    puts command.to_str
    # Default:
    # "bundle exec beaker --hosts  --keyfile /Users/samwoods/.ssh/id_rsa-acceptance --log-level debug
    # --pre-suite setup/install_gatling --helper
    # setup/helpers/classification_helper.rb,setup/helpers/ldap_helper.rb,setup/helpers/gatling_config_helper.rb
    # --preserve-hosts always --type pe"
  end

end

desc 'Run Performance setup for clamps'
rototiller_task :performance_clamps do |t|
  ENV['ENVIRONMENT_TYPE'] = 'clamps'
  Rake::Task["performance"].execute
end

desc 'Run Performance setup for gatling'
rototiller_task :performance_gatling do |t|
  ENV['ENVIRONMENT_TYPE'] = 'gatling'
  Rake::Task["performance"].execute
end

desc 'Run Performance setup and a very short iteration of gatling tests'
rototiller_task :acceptance do |t|
  ENV['ENVIRONMENT_TYPE'] = 'gatling'
  ENV['PUPPET_GATLING_SCENARIO'] = 'acceptance.json'
  ENV['BEAKER_HOSTS'] ||= 'config/beaker_hosts/pe-vmpooler.cfg'
  ENV['BEAKER_TESTS'] ||= 'tests/acceptance.rb'
  ENV['BEAKER_POST_SUITE'] = ''
  # Need to change this from an AWS OS image to a vmpooler OS image
  ENV['ABS_OS'] ||= 'centos-7-x86_64'
  Rake::Task["performance"].execute
end

desc "Run spec tests"
RSpec::Core::RakeTask.new(:spec) do |t|
  t.rspec_opts = ['--color']
  t.pattern = 'spec/'
end
